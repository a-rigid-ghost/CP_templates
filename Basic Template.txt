#include<bits/stdc++.h>
using namespace std; 
 
#define fast            ios_base::sync_with_stdio(false); cin.tie(NULL);
#define lli             long long int
#define ld              long double
#define pll             pair<lli,lli>
#define ve              vector<lli>
#define vep             vector<pll>
#define pb              push_back
#define mp              make_pair
#define mt              make_tuple
#define all(x)          (x).begin(),(x).end()
#define fr(i,a,n)       for(lli i=a;i<(n);i++)
#define frx(i,a,n)      for(lli i=a;i>(n);i--)
#define lb              lower_bound
#define ub              upper_bound
#define F               first
#define S               second
#define endl            '\n'
#define op(x)           cout<<x<<endl
#define op2(x,y)        cout<<x<<" "<<y<<endl
#define parr(arr,a,n)   fr(u,a,n) cout<<arr[u]<<" "; cout<<endl
#define yes             cout<<"YES"<<endl
#define no              cout<<"NO"<<endl
#define mem(a,x)        memset(a,x,sizeof(a))
#define sz(a) 		    ((lli) a.size())
#define db(x)           cout << "[ " << x << " ]" << endl
#define db2(x,y)        cout<<"[ " <<x<<" "<<y<< " ]" <<endl

void solve(){
    
}

int main(){
    fast;
    // #ifndef ONLINE_JUDGE
    // freopen("input.txt","r",stdin);
    // freopen("output.txt","w",stdout);
    // #endif
    lli test=1;
    cin>>test;
    while(test--){
        solve();
    }
}

////////custom comparator
///// RETURN TRUE WHEN A < B
///// RETURN FALSE WHEN A > B
///// RETURN FALSE WHEN A==B

struct custom{
    bool operator() (const pll &a,const pll &b) const
    {
        if((a.F)*(b.S)<(b.F)*(a.S))return true;
        return false;
    }
};

///////////PBDS

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<pair<lli,lli>, null_type, less<pair<lli,lli>>, rb_tree_tag, tree_order_statistics_node_update> pset;


order_of_key (k) : Number of items strictly smaller than k 
find_by_order(k) : K-th element in a set (counting from zero)

////////////Custom Hash

struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};

unordered_map<long long, int, custom_hash> safe_map;

//////////////// GOOGLE TEMPLATE

int main(){
    fast;
    lli test,cur=1;
    cin>>test;
    while(cur<test+1){
        cout<<"Case #"<<cur<<": ";
        solve();
        cur++;
    }
}
