//////BASIC GRAPH STRUCTURE

const lli N=1e5+10;
lli n,m;
ve adj[N],vis(N,0);

void dfs(lli root){
    vis[root]=1;
    for(auto e:adj[root]){
        if(!vis[e]){
            dfs(e);
        }
    }
}
 
void graphInput(){
    cin>>n>>m;
    fr(i,0,n+5){
        adj[i].clear();
        vis[i]=0;
    }
    fr(i,0,m){
        lli u,v;
        cin>>u>>v;
        adj[u].pb(v);
        adj[v].pb(u);
    }
}

/////////////Tarjan

const lli N=1e5+5;
lli mod=1e9+7;
ve adj[N];
lli ids[N],low[N]={0},stacks[N]={0},visited[N]={0},id=0,n,m;
stack<lli> instack;

void tarjan(lli cur){
    ids[cur]=++id;
    low[cur]=id;
    visited[cur]=1;
    stacks[cur]=1;
    instack.push(cur);
    for(auto nei:adj[cur]){
        if(!visited[nei]) tarjan(nei);
        if(stacks[nei]) low[cur]=min(low[cur],low[nei]);
    }
    if(low[cur]==ids[cur]){
        while(1){
            lli con=instack.top();
            instack.pop();
            low[con]=low[cur];
            stacks[con]=0;
            if(con==cur)break;
        }
    }
}

////////////Diameter
lli dia=0;
lli dfs(lli root,lli par){
    ve v;
    for(auto chi:adj[root]){
        if(chi!=par){
            v.pb(dfs(chi,root));
        }
    }
    lli sz=v.size();
    if(sz==0)return 0;
    if(sz==1){
        dia=max(dia,v[0]+1);
        return v[0]+1;
    }
    sort(all(v),greater<lli>());
    dia=max(dia,2+v[0]+v[1]);
    return v[0]+1;
}
